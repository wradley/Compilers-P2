Unterminated String Literal Testing
untermStringLitTest.in

(Line number)

(1) Input: Valid String Literal 
    Output: StringLit Token
(2) Input: Unterminated String Literal 
    Output: "unterminated string literal ignored"
	- The following line is a single double quote to make sure line (2) doesn't accept this as the closing double quote.
	- This single quote should also be recognized as an unterminated string lit so an error message should be outputted
(3) Input: Unterminated String Literal
    Output: "unterminated string literal ignored"
	- Following line is a valid token followed by a double quote
	- The token should be recognized and outputted and the double quote should output the unterminated string lit message
(4) Input: Unterminated String Literal  
    Output: "unterminated string literal ignored"
	- Following line is a valid token and should be outputted
(5) Input: Unterminated string Literal, EOF is before double quote 
    Output: "unterminated string literal ignored"

Bad String (and both unterminated and bad) Literal Testing
badStringLitTest.in

- The text file starts with valid string literals because they have valid escape characters. The valid strings should be outputted
- Then there are invalid string literals because they have invalid escape characters. The respective error message should be outputted
- Finally, the case where the string lit is both unterminated (EOF) and bad is tested. The respective error message should be outputted.

Bad Integer Literal Testing
badIntLitTest.in

- The first two lines are valid int literals
- The third line is 5 valid tokens in a programming language style
- The fourth line makes sure that our scanner doesn't recognize negative ints. This should be a valid "-" token followed by a valid int literal
- The fifth line tests the max int value
- The sixth line tests one above the max int value
- The seventh line tests a value higher than the max int value with an extra digit as well. The character counter should recognize the 10 starting at charNum 13

